import TelegramBot from 'node-telegram-bot-api';
import * as dotenv from "dotenv";
import sequelize, { syncDataBase } from './database/dbsync';
import { initUsersModel, Users } from './database/Models/Users';
import { Tickets } from './database/Models/Tickets';
// import { FAQ } from './database/Models/FAQ';
dotenv.config();
sequelize;
const a = (async () => {
    console.log('asdfasdf')
    await syncDataBase();
})();

const messageSupportId = new Map();

const bot = new TelegramBot(process.env.BOT_TOKEN, {
    polling: {
        interval: 300,
        autoStart: true
    }
}
)

bot.onText(/\/start/, async msg => {
    await bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å',
                        callback_data: 'button_help'
                    },
                    {
                        text: `–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é`,
                        callback_data: 'button_close_help_button'
                    }
                ]
            ]
        },
    });
})

bot.on('callback_query', async interaction => {
    const chatId = interaction.message!.chat.id;
    const data = interaction.data;

    if (data === 'button_help') {
        bot.sendMessage(chatId, '–° —á–µ–º –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: `–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º`,
                            callback_data: `button_tech_spec_support`
                        }
                    ]
                ]
            }
        })
    } else if (data === "button_tech_spec_support") {
        const message = bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');

        messageSupportId.set((await message).message_id, (await message).message_id)
    } else if (data?.replace(/[^a-zA-Z]/g, "") === 'buttonReplySupport') {
        bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –æ—Ç–≤–µ—Ç—å–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    } else if (data?.replace(/[^a-zA-Z]/g, "") === 'buttonDeclineReply') {
        bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω—è—é –∑–∞–ø—Ä–æ—Å');
        try {
            const ticketsDb = await Tickets.findOne({ where: { ticket_id: data.replace(/\D/g, "") }});
            bot.sendMessage(ticketsDb!.user_id, `–í–∞—à –∑–∞–ø—Ä–æ—Å <pre> ${ticketsDb?.ticket_id} </pre> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`, { parse_mode: 'HTML' })
            if (ticketsDb) {
                await Tickets.destroy({ where: { ticket_id: data.replace(/\D/g, "")  } });
            }
        } catch (err) {
            console.error(err);
            bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —á–µ–∫ –∫–æ–Ω—Å–æ–ª—å`)
        }
    }
})

//—á–µ–ª –≤—ã–±–∏—Ä–∞–µ—Ç —Å —á–µ–º –Ω—É–∂–Ω–∞ –µ–º—É –ø–æ–º–æ—â—å –∏ –µ–≥–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥—è—Ç –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.

bot.on('text', async msg => {
    if (messageSupportId.get(msg.reply_to_message?.message_id)) {
        try {
            bot.sendMessage(1911604621, `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *${msg.from?.first_name}*\n–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:\n\`\`\` ${msg.text} \`\`\`\nId —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.message_id}${msg.chat.id}`,
                {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å',
                                    callback_data: `buttonReplySupport_${msg.message_id}${msg.chat.id}`
                                },
                                {
                                    text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å`,
                                    callback_data: `buttonDeclineReply_${msg.message_id}${msg.chat.id}`
                                }
                            ]
                        ]
                    }
                    
                });

            const addMessageSupport = await Users.findOne({ where: { user_id: msg.chat.id } });

            if (!addMessageSupport) {
                Users.create({
                    user_id: msg.chat.id,
                    username: msg.from?.first_name || 'undefined'
                });
            }

            function parseIntDb(): number {
                try {
                    const a = `${msg.message_id}${msg.chat.id}`;
                    return parseInt(a);
                } catch (err) {
                    console.error(err)
                    return 0;
                }
            }

            const addTicketsSupport = await Tickets.findOne({ where: { user_id: parseIntDb() } });

            if (!addTicketsSupport) {
                if (parseIntDb() === 0) {
                    Tickets.create({
                        ticket_id: 0,
                        user_id: 0,
                        status: true,
                        message_id: 0
                    })
                } else {
                    Tickets.create({
                        ticket_id: parseIntDb(),
                        status: true,
                        user_id: msg.chat.id,
                        message_id: msg.message_id
                    })
                }
            }

            bot.sendMessage(msg.chat.id, `–Ø –Ω–∞–ø—Ä–∞–≤–∏–ª –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç—è—Ç —á–µ—Ä–µ–∑ –¥–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∫–∏ –≤ /menu\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ${msg.message_id}${msg.chat.id}`)

        } catch (err) {
            console.error(err);
        }
    }
})

bot.on('polling_error', err => console.log(err.message));